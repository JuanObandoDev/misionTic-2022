import { useRouter } from "next/router";
import styles from "../../styles/updDoc.module.css";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { useState, useEffect } from "react";
import { Spinner } from "reactstrap";

export default function UpdDoc() {
  const [loading, setLoading] = useState(false);
  const [disable, setDisable] = useState(false);
  const [docs, setDocs] = useState([]);
  const [doc, setDoc] = useState([]);
  const router = useRouter();
  const { doc_id } = router.query;

  useEffect(() => {
    const load = async () => {
      const res = await fetch("/api/docs/docs");
      const data = await res.json();
      setDocs(data);
      setLoading(true);
    };

    const loadDoc = () => {
      for (let i = 0; docs.length; i++) {
        if (docs[i]._id === doc_id) {
          setDoc(docs[i]);
          setForm({
            title: docs[i].Titulo,
            author: docs[i].Autor,
            editorial: docs[i].Editorial,
            gender: docs[i].Genero,
            edition: docs[i].Edicion,
            icbn: docs[i].Icbn,
            date: docs[i].anoPublicacion,
          });
          break;
        }
      }
    };
    load();
    loadDoc();
  }, [loading]);

  const [form, setForm] = useState({
    title: "",
    author: "",
    editorial: "",
    gender: "",
    edition: "",
    icbn: "",
    date: "",
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setDisable(true);
    if (
      form.title.length > 0 &&
      form.author.length > 0 &&
      form.editorial.length > 0 &&
      form.gender.length > 0 &&
      form.edition.length > 0 &&
      form.icbn.length > 0 &&
      form.date.length > 0
    ) {
      const formatForm = {
        Titulo: form.title,
        Autor: form.author,
        Editorial: form.editorial,
        Genero: form.gender,
        Edicion: form.edition,
        Icbn: form.icbn,
        anoPublicacion: form.date,
      };
      const req = await fetch(`/api/docs/updDoc/${doc._id}`, {
        method: "PUT",
        body: JSON.stringify({ doc: formatForm }),
        headers: {
          "Content-Type": "application/json",
        },
      });
      const res = await req.json();
      if (res.success) {
        router.push("/docs");
      } else {
        alert("Some field are incorrect");
      }
    } else {
      alert("Please fill all the fields");
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Gestion Documental</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        <Link className={styles.Link} href="/">
          <h3>Gestion Documental</h3>
        </Link>
        <div className={styles.header}>
          <Link className={styles.Link} href="/docs">
            Docs
          </Link>
          <Link className={styles.Link} href="/category">
            Categories
          </Link>
          <Link className={styles.Link} href="/inventory">
            Inventory
          </Link>
        </div>
      </header>

      <main className={styles.main}>
        {loading ? (
          <>
            <h1 className={styles.title}>
              Update <span>{doc.Titulo}</span>
            </h1>
            <form className={styles.form} onSubmit={handleSubmit}>
              <div className={styles.formGroup}>
                <label htmlFor="title">Title:</label>
                <input
                  type="text"
                  name="title"
                  id="title"
                  value={form.title}
                  onChange={(e) => {
                    setForm({ ...form, title: e.target.value });
                  }}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="author">Author:</label>
                <input
                  type="text"
                  name="author"
                  id="author"
                  value={form.author}
                  onChange={(e) => {
                    setForm({ ...form, author: e.target.value });
                  }}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="editorial">Editorial:</label>
                <input
                  type="text"
                  name="editorial"
                  id="editorial"
                  value={form.editorial}
                  onChange={(e) => {
                    setForm({ ...form, editorial: e.target.value });
                  }}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="gender">Gender:</label>
                <input
                  type="text"
                  name="gender"
                  id="gender"
                  value={form.gender}
                  onChange={(e) => {
                    setForm({ ...form, gender: e.target.value });
                  }}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="edition">Edition:</label>
                <input
                  type="text"
                  name="edition"
                  id="edition"
                  value={form.edition}
                  onChange={(e) => {
                    setForm({ ...form, edition: e.target.value });
                  }}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="Icbn">Icbn:</label>
                <input
                  type="text"
                  name="Icbn"
                  id="Icbn"
                  value={form.icbn}
                  onChange={(e) => {
                    setForm({ ...form, icbn: e.target.value });
                  }}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="Date">Date:</label>
                <input
                  min={0}
                  max={9999}
                  type="number"
                  name="Date"
                  id="Date"
                  value={form.date}
                  onChange={(e) => {
                    setForm({ ...form, date: e.target.value });
                  }}
                />
              </div>
              <div className={styles.formGroup}>
                <button className={styles.button} hidden={disable}>
                  Update
                </button>
                <Link
                  href={"/docs"}
                  className={styles.cancelBtn}
                  hidden={disable}
                >
                  Cancel
                </Link>
              </div>
              <Spinner hidden={!disable} />
            </form>
          </>
        ) : (
          <Spinner hidden={loading} />
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
